# CGMiner-RS 软核限制CPU使用配置
# 适用于共享服务器环境，需要为其他应用保留CPU资源

[general]
log_level = "info"
log_file = "logs/cgminer-limited-cpu.log"
api_port = 4028
api_bind = "127.0.0.1"       # 仅本地访问

[cores]
enabled_cores = ["btc-software"]
default_core = "btc-software"

# Bitcoin软算法核心配置 - 限制CPU使用
[cores.btc_software]
enabled = true
device_count = 8             # 较少设备数 (建议为CPU核心数的0.5-1倍)
min_hashrate = 500000000.0   # 最小算力: 500 MH/s
max_hashrate = 1500000000.0  # 最大算力: 1.5 GH/s (保守配置)
error_rate = 0.01            # 适中错误率: 1%
batch_size = 1000            # 小批次处理
work_timeout_ms = 5000       # 较长超时时间

# CPU绑定配置 - 限制使用特定核心
[cores.btc_software.cpu_affinity]
enabled = true               # 启用CPU绑定
strategy = "manual"          # 手动指定CPU核心
avoid_hyperthreading = true  # 避免超线程，减少对其他应用的影响
prefer_performance_cores = false # 不优先性能核心，为其他应用保留

# 手动映射 - 只使用部分CPU核心 (假设16核心系统，只使用前8个)
manual_mapping = {
  0 = 0, 1 = 1, 2 = 2, 3 = 3,
  4 = 4, 5 = 5, 6 = 6, 7 = 7
}

# 禁用ASIC核心
[cores.maijie_l7]
enabled = false

# =============================================================================
# 矿池配置 - 保守连接
# =============================================================================
[pools]
strategy = "Failover"        # 故障转移策略
failover_timeout = 60        # 较长故障转移时间
retry_interval = 30          # 较长重试间隔

[[pools.pools]]
name = "f2pool"
url = "stratum+tcp://btc.f2pool.com:1314"
username = "kayuii.bbt"
password = "x"
priority = 1
enabled = true

[[pools.pools]]
name = "f2pool-backup"
url = "stratum+tcp://btc-asia.f2pool.com:1314"
username = "kayuii.bbt"
password = "x"
priority = 2
enabled = true

# =============================================================================
# 设备配置 - 保守设置
# =============================================================================
[devices]
auto_detect = true
scan_interval = 300          # 长扫描间隔减少系统负载

# =============================================================================
# 性能优化配置 - 资源节约
# =============================================================================
[performance]

# 算力优化 - 保守配置
[performance.hashrate_optimization]
base_hashrate = 1000000000.0      # 1 GH/s基础算力
hashrate_variance = 0.2           # ±20%变化范围
frequency_hashrate_factor = 1.2   # 低频率-算力因子
voltage_hashrate_factor = 1.1     # 低电压-算力因子
temperature_impact_factor = 0.95  # 温度影响因子
adaptive_adjustment = true        # 自适应调整

# 内存优化 - 小缓存
[performance.memory_optimization]
work_cache_size = 500            # 小工作缓存
result_cache_size = 5000         # 小结果缓存
stats_retention_seconds = 1800   # 30分钟统计保留
enable_memory_pool = true        # 启用内存池
preallocated_memory_mb = 32      # 预分配32MB内存

# 线程优化 - 低优先级
[performance.thread_optimization]
worker_threads_per_device = 1    # 每设备单线程
thread_priority = "Low"          # 低线程优先级
thread_stack_size_kb = 256       # 小线程栈
enable_thread_pool = true        # 启用线程池

# 批处理优化 - 小批次
[performance.batch_optimization]
default_batch_size = 1000        # 小批次处理
min_batch_size = 500             # 最小批次
max_batch_size = 2000            # 最大批次
adaptive_batch_size = true       # 自适应批次大小
batch_timeout_ms = 2000          # 较长批次超时

# 网络优化 - 低并发
[performance.network_optimization]
connection_pool_size = 5         # 小连接池
request_timeout_ms = 5000        # 较长请求超时
max_concurrent_requests = 10     # 低并发请求
keepalive_interval = 60          # 长保活间隔

# =============================================================================
# 系统资源配置 - 限制使用
# =============================================================================
[limits]
max_memory_mb = 1024         # 最大内存使用 (1GB)
max_cpu_percent = 40         # 最大CPU使用率 (40%)
max_open_files = 1024        # 小文件描述符限制
max_network_connections = 20 # 小网络连接数

# =============================================================================
# 监控配置 - 轻量级
# =============================================================================
[monitoring]
enabled = true
metrics_interval = 60        # 60秒监控间隔
web_port = 8080

# 保守阈值设置
[monitoring.thresholds]
max_temperature = 75.0       # 较低温度限制
max_cpu_usage = 45.0         # 较低CPU使用率限制
max_memory_usage = 70.0      # 较低内存使用率限制
max_device_temperature = 75.0
max_error_rate = 5.0         # 允许较高错误率
min_hashrate = 5.0           # 目标最小总算力: 5 GH/s

# =============================================================================
# 算力计量器配置 - 简化输出
# =============================================================================
[hashmeter]
enabled = true
log_interval = 60            # 60秒算力报告
per_device_stats = false     # 禁用单设备统计
console_output = true
beautiful_output = false     # 简化输出格式
hashrate_unit = "GH"         # 使用GH/s单位

# =============================================================================
# Web界面配置 - 本地访问
# =============================================================================
[web]
enabled = true
port = 8080
bind_address = "127.0.0.1"   # 仅本地访问
static_files_dir = "web/static"
template_dir = "web/templates"

# =============================================================================
# 日志配置 - 轻量级
# =============================================================================
[logging]
level = "warn"               # 警告级别日志
file = "logs/cgminer-limited-cpu.log"
max_size = "100MB"           # 小日志文件
max_files = 2                # 少日志文件数
console = false              # 禁用控制台输出
json_format = false
rotation = "weekly"

# =============================================================================
# 资源监控和自动调整
# =============================================================================
[auto_adjustment]
enabled = true               # 启用自动调整
cpu_threshold = 35.0         # CPU使用率阈值
memory_threshold = 60.0      # 内存使用率阈值
adjustment_interval = 300    # 5分钟调整间隔

# 当CPU使用率超过阈值时的调整策略
[auto_adjustment.cpu_overload]
reduce_device_count = true   # 减少设备数量
reduce_batch_size = true     # 减少批次大小
increase_timeout = true      # 增加超时时间

# 当内存使用率超过阈值时的调整策略
[auto_adjustment.memory_overload]
clear_cache = true           # 清理缓存
reduce_cache_size = true     # 减少缓存大小
force_gc = true              # 强制垃圾回收

# =============================================================================
# 使用建议
# =============================================================================
# 1. 此配置适用于共享服务器环境
# 2. 定期监控系统资源使用情况
# 3. 根据其他应用的需求调整CPU限制
# 4. 可以通过API动态调整参数
# 5. 建议在非高峰时段适当提高资源使用
# 6. 监控其他应用的性能，确保不受影响

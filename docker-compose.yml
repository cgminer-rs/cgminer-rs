version: '3.8'

services:
  # Main CGMiner-RS service
  cgminer-rs:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: cgminer-rs
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - ./config.toml:/etc/cgminer-rs/config.toml:ro
      - cgminer-logs:/var/log/cgminer-rs
      - cgminer-data:/var/lib/cgminer-rs
    environment:
      - RUST_LOG=info
      - CGMINER_CONFIG=/etc/cgminer-rs/config.toml
    networks:
      - cgminer-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Development service with hot reload
  cgminer-rs-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: cgminer-rs-dev
    ports:
      - "8080:8080"
      - "9229:9229"  # Debug port
    volumes:
      - .:/app
      - cargo-cache:/usr/local/cargo/registry
      - target-cache:/app/target
    environment:
      - RUST_LOG=debug
      - CGMINER_CONFIG=/app/config.toml
    networks:
      - cgminer-network
    profiles:
      - dev

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: cgminer-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - cgminer-network
    profiles:
      - monitoring

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: cgminer-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - cgminer-network
    profiles:
      - monitoring
    depends_on:
      - prometheus

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: cgminer-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    networks:
      - cgminer-network
    profiles:
      - cache

  # NGINX reverse proxy
  nginx:
    image: nginx:alpine
    container_name: cgminer-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    networks:
      - cgminer-network
    profiles:
      - proxy
    depends_on:
      - cgminer-rs

  # Log aggregation with Fluentd
  fluentd:
    build:
      context: ./logging
      dockerfile: Dockerfile
    container_name: cgminer-fluentd
    volumes:
      - ./logging/fluent.conf:/fluentd/etc/fluent.conf:ro
      - cgminer-logs:/var/log/cgminer-rs:ro
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    networks:
      - cgminer-network
    profiles:
      - logging

  # Elasticsearch for log storage
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: cgminer-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - cgminer-network
    profiles:
      - logging

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: cgminer-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - cgminer-network
    profiles:
      - logging
    depends_on:
      - elasticsearch

  # Test database for integration tests
  test-db:
    image: postgres:15-alpine
    container_name: cgminer-test-db
    environment:
      - POSTGRES_DB=cgminer_test
      - POSTGRES_USER=test
      - POSTGRES_PASSWORD=test
    volumes:
      - test-db-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - cgminer-network
    profiles:
      - test

  # Mock mining pool for testing
  mock-pool:
    build:
      context: ./testing
      dockerfile: Dockerfile.mock-pool
    container_name: cgminer-mock-pool
    ports:
      - "4444:4444"
    environment:
      - POOL_DIFFICULTY=1024
      - POOL_NAME=test-pool
    networks:
      - cgminer-network
    profiles:
      - test

  # Performance testing with Artillery
  performance-test:
    image: artilleryio/artillery:latest
    container_name: cgminer-perf-test
    volumes:
      - ./testing/performance:/scripts
    command: ["run", "/scripts/load-test.yml"]
    networks:
      - cgminer-network
    profiles:
      - perf-test
    depends_on:
      - cgminer-rs

networks:
  cgminer-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  cgminer-logs:
    driver: local
  cgminer-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  redis-data:
    driver: local
  nginx-logs:
    driver: local
  elasticsearch-data:
    driver: local
  test-db-data:
    driver: local
  cargo-cache:
    driver: local
  target-cache:
    driver: local
